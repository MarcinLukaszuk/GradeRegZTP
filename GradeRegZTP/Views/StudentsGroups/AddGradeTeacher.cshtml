@model  GradeRegZTP.ViewModel.StudentsGroupAddGradeViewModelList
@using (@Html.BeginForm("AddGrade", "StudentsGroups", FormMethod.Post, new { @class = "form-horizontal", role = "form" }))
{
    ViewBag.Title = "Details";

    <style>

        table {
            counter-reset: rownumber;
        }

            table tr td:first-child {
                counter-increment: rownumber;
            }

                table tr td:first-child::before {
                    content: counter(rownumber);
                }
    </style>

    @Html.AntiForgeryToken()
    @Html.EditorForModel()


    <h2>@Model.StudentsGroupAddGradeViewModels.FirstOrDefault().SubjectName </h2>
    <div class="form-horizontal">
        <h4>@Model.StudentsGroupAddGradeViewModels.FirstOrDefault().StudentGroupName</h4>

        <table class="table">
            <tr>
                <th width="20%">
                    Uczeń
                </th>
                <th width="10%">
                    Ocena
                </th>
                <th width="10%">
                    Waga
                </th>
                <th width="60%">
                    Notatka
                </th>
            </tr>

            @for (int i = 0; i < Model.StudentsGroupAddGradeViewModels.Count(); i++)
            {
                @Html.HiddenFor(model => Model.StudentsGroupAddGradeViewModels[i].MyUserId)
                @Html.HiddenFor(model => Model.StudentsGroupAddGradeViewModels[i].StudentGroupName)
                @Html.HiddenFor(model => Model.StudentsGroupAddGradeViewModels[i].StudentsGroupId)
                @Html.HiddenFor(model => Model.StudentsGroupAddGradeViewModels[i].SubjectId)
                @Html.HiddenFor(model => Model.StudentsGroupAddGradeViewModels[i].SubjectName)

                <tr>
                    <td>
                        @Model.StudentsGroupAddGradeViewModels[i].MyUser.Name @Model.StudentsGroupAddGradeViewModels[i].MyUser.Surname
                    </td>
                    <td>
                        @Html.EditorFor(model => Model.StudentsGroupAddGradeViewModels[i].Grade, new { htmlAttributes = new { @class = "form-control" } })
                    </td>
                    <td>
                        @Html.EditorFor(model => Model.StudentsGroupAddGradeViewModels[i].Weight, new { htmlAttributes = new { @class = "form-control weight" } })
                    </td>
                    <td>
                        @Html.EditorFor(model => Model.StudentsGroupAddGradeViewModels[i].Note, new { htmlAttributes = new { @class = "form-control note" } })
                    </td>
                </tr>
            }


        </table>
    </div>

    <div class="form-group">
        <label class="control-label col-md-2">Ustaw Wagę</label>
        <div class="col-md-10">
            <input onkeyup="setWeight(this)" onclick="setWeight(this)" class="form-control" type="number" min="1" max="3" />
        </div>
    </div>

    <div class="form-group">
        <label class="control-label col-md-2">Ustaw Notatkę</label>
        <div class="col-md-10">
            <input onkeyup="setNote(this)" class="form-control" />
        </div>
    </div>
    <div class="form-group">


        <div class=" col-md-11">
        </div>
        <div class=" col-md-1">
            <input type="submit" value="Add Grades" class="btn btn-primary" />
        </div>

    </div>
}

<script>

    function setWeight(element) {

        var inputs = $(".weight");
        if (element.value > 3) element.value = 3;
        if (element.value <1 ) element.value = 1;

        for (var i = 0; i < inputs.length; i++) {
            var elem = inputs[i];
            elem.value = element.value;
        }
    }
    function setNote(element) {
        var inputs = $(".note");
        for (var i = 0; i < inputs.length; i++) {
            var elem = inputs[i];
            elem.value = element.value;
        }
    }
</script>